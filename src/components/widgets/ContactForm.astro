---
const emailData = {
  key: "f4795573-4477-40a4-9134-7719525fa71e",
  subject: "Nowa wiadomość ze strony www",
  from: "Nowa wiadomość ze strony www.lukaszmilos.pl",
}

const statuses = {
  sending: "Wysyłanie...",
  success: "Wiadomość została wysłana",
  error: "Błąd: ",
}

const errors = {
  emailRequired: "E-mail jest wymagany",
  emailInvalid: "Podany e-mail jest nieprawidłowy",
  messageRequired: "Wiadomość jest wymagana",
  somethingWentWrong: "Coś poszło nie tak",
}
---

<form
  action="https://api.web3forms.com/submit"
  method="POST"
  id="form"
  class="needs-validation flex flex-col gap-6"
  data-astro-reload
  novalidate>
  <input type="hidden" name="access_key" value={emailData.key} />

  <!-- Spam prevention -->
  <input type="checkbox" class="hidden" style="display:none" name="botcheck" />

  <!-- Subject -->
  <input type="hidden" name="subject" value={emailData.subject} />

  <!-- From name -->
  <input type="hidden" name="from_name" value={emailData.from} />

  <!-- E-mail -->
  <div class="flex flex-col gap-2">
    <label for="email" class="">
      E-mail <span class="text-danger">*</span>
    </label>
    <input
      id="email"
      name="email"
      type="email"
      required
      placeholder="Twój adres e-mail"
      class="rounded border border-border_color text-sm focus:border-accent"
    />
    <div class="empty-feedback">{errors.emailRequired}</div>
    <div class="invalid-feedback">{errors.emailInvalid}</div>
  </div>

  <!-- Message -->
  <div class="flex flex-col gap-2">
    <label for="message" class="">
      Wiadomość <span class="text-danger">*</span>
    </label>
    <textarea
      id="message"
      name="message"
      rows="8"
      cols="50"
      required
      placeholder="Twoja wiadomość"
      class="rounded border border-border_color text-sm text-black focus:border-accent">
    </textarea>
    <div class="empty-feedback invalid-feedback">{errors.messageRequired}</div>
  </div>

  <!-- Terms -->
  <div class="flex flex-col gap-2">
    <label for="terms" class="text-sm">
      <input
        id="terms"
        name="terms"
        type="checkbox"
        required
        class="mr-2 h-4 w-4 border-border_color focus:border-accent"
      />
      Zgadzam się z{" "}
      <a href="#" class="text-accent hover:underline">
        polityką prywatności <span class="text-danger">*</span>
      </a>
    </label>
  </div>

  <!-- Submit -->
  <button
    type="submit"
    class="flex flex-row place-items-center justify-center gap-2 self-stretch rounded border border-accent bg-accent px-4 py-4 text-base text-white shadow-md transition-all duration-300 ease-in-out hover:translate-y-1 hover:border-accent-dark hover:bg-accent-dark md:self-start">
    Wyślij wiadomość
  </button>

  <div id="result" class="p-2 text-center"></div>
</form>

<style>
  .invalid-feedback,
  .empty-feedback,
  .error {
    display: none;
    @apply rounded bg-danger-light p-2 text-sm text-danger shadow-sm;
  }

  .success {
    @apply rounded bg-success-light p-2 text-sm text-success shadow-sm;
  }

  .sending {
    @apply rounded bg-accent-lightest p-2 text-sm text-accent shadow-sm;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    @apply border-danger;
  }

  .is-invalid,
  .was-validated :focus {
    @apply border-accent;
  }
</style>

<script is:inline define:vars={{ statuses, errors }}>
  document.addEventListener(
    "DOMContentLoaded",
    () => {
      const form = document.getElementById("form")
      const result = document.getElementById("result")

      document.getElementById("message").defaultValue = ""

      form.addEventListener("submit", function (e) {
        e.preventDefault()
        form.classList.add("was-validated")

        if (!form.checkValidity()) {
          form.querySelectorAll(":invalid")[0].focus()
          return
        }
        const formData = new FormData(form)
        let object = Object.fromEntries(formData)

        object["wiadomość"] = object["message"]
        delete object["message"]
        delete object["terms"]

        const json = JSON.stringify(object)

        result.innerHTML = statuses.sending
        result.classList.add("sending")

        fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: json,
        })
          .then(async (response) => {
            let json = await response.json()
            result.classList.remove("sending")
            if (response.status == 200) {
              result.classList.add("success")
              result.innerHTML = statuses.success
            } else {
              result.classList.add("error")
              result.innerHTML = statuses.error + json.message
            }
          })
          .catch((error) => {
            result.innerHTML = errors.somethingWentWrong
          })
          .then(function () {
            form.reset()
            form.classList.remove("was-validated")
            setTimeout(() => {
              result.style.display = "none"
            }, 5000)
          })
      })
    },
    { once: true }
  )
</script>
